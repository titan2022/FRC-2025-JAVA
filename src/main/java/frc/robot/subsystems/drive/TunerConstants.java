package frc.robot.subsystems.drive;

import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;

import edu.wpi.first.math.util.Units;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
        // Both sets of gains need to be tuned to your individual robot.

        // The steer motor uses any SwerveModule.SteerRequestType control request with
        // the
        // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
        public static final Slot0Configs steerGains = new Slot0Configs()
                        .withKP(100).withKI(0).withKD(0.2)
                        .withKS(0).withKV(1.5).withKA(0);
        // When using closed-loop control, the drive motor uses the control
        // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
        public static final Slot0Configs driveGains = new Slot0Configs()
                        .withKP(3).withKI(0).withKD(0)
                        .withKS(0).withKV(0).withKA(0);

        // The closed-loop output type to use for the steer motors;
        // This affects the PID/FF gains for the steer motors
        public static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
        // The closed-loop output type to use for the drive motors;
        // This affects the PID/FF gains for the drive motors
        public static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

        // The stator current at which the wheels start to slip;
        // This needs to be tuned to your individual robot
        public static final double kSlipCurrentA = 300.0;

        // Theoretical free speed (m/s) at 12v applied output;
        // This needs to be tuned to your individual robot
        public static final double MAX_SPEED = 2; // standard is 2 m/s
        public static final double MAX_ANGULAR_SPEED = 0.5 * Math.PI; // 3/4 of a rotation per second max angular
                                                                      // velocity

        // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
        // This may need to be tuned to your individual robot
        public static final double kCoupleRatio = 3.5714285714285716;

        public static final double kDriveGearRatio = 6.122448979591837;
        public static final double kSteerGearRatio = 21.428571428571427;
        public static final double kWheelRadiusInches = 2;

        public static final boolean kSteerMotorReversed = false;
        public static final boolean kInvertLeftSide = false;
        public static final boolean kInvertRightSide = true;

        public static final String kCANbusName = "";
        public static final int kPigeonId = 15;

        // These are only used for simulation
        public static final double kSteerInertia = 0.00001;
        public static final double kDriveInertia = 0.001;
        // Simulated voltage necessary to overcome friction
        public static final double kSteerFrictionVoltage = 0.25;
        public static final double kDriveFrictionVoltage = 0.25;

        public static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
                        .withPigeon2Id(kPigeonId)
                        .withCANBusName(kCANbusName);

        private static final SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> ConstantCreator =

        new SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadiusInches)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
        //     .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrentA)
            .withSpeedAt12Volts(MAX_SPEED)
        //     .withDriveMotorType(kDriveMotorType)
        //     .withSteerMotorType(kSteerMotorType)
        //     .withFeedbackSource(SteerFeedbackType.RemoteCANcoder)
        //     .withDriveMotorInitialConfigs(driveInitialConfigs)
        //     .withSteerMotorInitialConfigs(steerInitialConfigs)
        //     .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage);

        // Front Left
        public static final int kFrontLeftDriveMotorId = 31;
        public static final int kFrontLeftSteerMotorId = 41;
        public static final int kFrontLeftEncoderId = 51;
        public static final double kFrontLeftEncoderOffset = -0.21728515625; // rotations

        public static final double kFrontLeftXPosInches = 9;
        public static final double kFrontLeftYPosInches = 9;

        public static final boolean kFrontLeftSteerMotorInverted = false;
        public static final boolean kFrontLeftEncoderInverted = false;

        // Front Right
        public static final int kFrontRightDriveMotorId = 42;
        public static final int kFrontRightSteerMotorId = 32;
        public static final int kFrontRightEncoderId = 52;
        public static final double kFrontRightEncoderOffset = 0.304443359375; // rotations

        public static final double kFrontRightXPosInches = 9;
        public static final double kFrontRightYPosInches = -9;

        public static final boolean kFrontRightSteerMotorInverted = false;
        public static final boolean kFrontRightEncoderInverted = false;

        // Back Left
        public static final int kBackLeftDriveMotorId = 40;
        public static final int kBackLeftSteerMotorId = 30;
        public static final int kBackLeftEncoderId = 50;
        public static final double kBackLeftEncoderOffset = -0.2900390625; // rotations

        public static final double kBackLeftXPosInches = -9;
        public static final double kBackLeftYPosInches = 9;

        public static final boolean kBackLeftSteerMotorInverted = false;
        public static final boolean kBackLeftEncoderInverted = false;

        // Back Right
        public static final int kBackRightDriveMotorId = 43;
        public static final int kBackRightSteerMotorId = 33;
        public static final int kBackRightEncoderId = 53;
        public static final double kBackRightEncoderOffset = 0.469970703125; // rotations

        public static final double kBackRightXPosInches = -9;
        public static final double kBackRightYPosInches = -9;

        public static final boolean kBackRightSteerMotorInverted = false;
        public static final boolean kBackRightEncoderInverted = false;


        public static final int FRONT_LEFT_MODULE = 0;
        public static final int FRONT_RIGHT_MODULE = 1;
        public static final int BACK_LEFT_MODULE = 2;
        public static final int BACK_RIGHT_MODULE = 3;

        public static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
                        kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset,
                        Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches),
                        kInvertLeftSide, kFrontLeftSteerMotorInverted, kFrontLeftEncoderInverted);
        public static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
                        kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId,
                        kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches),
                        Units.inchesToMeters(kFrontRightYPosInches), kInvertRightSide, kFrontRightSteerMotorInverted, kFrontRightEncoderInverted);
        public static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
                        kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset,
                        Units.inchesToMeters(kBackLeftXPosInches), Units.inchesToMeters(kBackLeftYPosInches),
                        kInvertLeftSide, kBackLeftSteerMotorInverted, kBackLeftEncoderInverted);
        public static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
                        kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset,
                        Units.inchesToMeters(kBackRightXPosInches), Units.inchesToMeters(kBackRightYPosInches),
                        kInvertRightSide, kBackRightSteerMotorInverted, kBackRightEncoderInverted);

        // public static final CTRESwerveDrivetrain DriveTrain = new
        // CTRESwerveDrivetrain(DrivetrainConstants, FrontLeft,
        // FrontRight, BackLeft, BackRight);
}
